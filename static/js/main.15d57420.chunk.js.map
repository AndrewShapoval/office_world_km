{"version":3,"sources":["n1_main/m1_ui/components/companies/company/Company.module.css","n1_main/m1_ui/components/companies/Companies.module.css","n1_main/m1_ui/components/main/Main.module.css","n1_main/m1_ui/common/preloader/Preloader.module.css","n1_main/m3_dal/companies-api.ts","n1_main/m2_bll/app-reducer.ts","n1_main/m2_bll/companies-reducer.ts","n1_main/m1_ui/components/companies/company/Company.tsx","n1_main/m1_ui/common/preloader/preloader2.gif","n1_main/m1_ui/common/preloader/Preloader.tsx","n1_main/m1_ui/components/companies/Companies.tsx","assets/img/like.svg","assets/img/heart.svg","n1_main/m1_ui/components/stations/station/Station.tsx","n1_main/m1_ui/components/stations/Stations.tsx","n1_main/m1_ui/components/main/Main.tsx","n1_main/m1_ui/App.tsx","reportWebVitals.ts","n1_main/m2_bll/store.ts","index.tsx","n1_main/m1_ui/components/stations/Stations.module.css","n1_main/m1_ui/components/stations/station/Station.module.css"],"names":["module","exports","instance","axios","create","baseURL","companiesAPI","get","then","r","data","id","initialState","status","setAppStatusAC","type","companies","currentCompany","currentStations","favoriteStations","setStationsStatusAC","getStationsTC","dispatch","res","stations","network","company","catch","finally","Company","React","memo","props","useDispatch","currentCompanyID","useSelector","state","companiesState","className","styles","button","onClick","disabled","location","city","Preloader","s","wrapper","src","preloader","alt","Companies","appState","useEffect","networks","h2","map","c","Station","favoriteStation","find","station","name","stationId","favorite","like","Stations","h3","totalStations","length","Main","mainBlock","mainContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15d57420.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"company\":\"Company_company__2kHWc\",\"button\":\"Company_button__1jFsf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companies\":\"Companies_companies__2yebb\",\"h2\":\"Companies_h2__1Lrn9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Main_mainBlock__HsWfN\",\"mainContainer\":\"Main_mainContainer__3mrcS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__1Fb6N\"};","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.citybik.es/v2/\"\r\n})\r\n\r\nexport const companiesAPI = {\r\n    getCompanies() {\r\n        return instance.get<{ networks: Array<CompanyType> }>(\"networks?fields=id,company,location\").then(r => r.data)\r\n    },\r\n    getStations(id: string) {\r\n        return instance.get<{ network: CompanyType }>(`networks/${id}`).then(r => r.data)\r\n    }\r\n}\r\n\r\nexport type CompanyType = {\r\n    company: string\r\n    id: string\r\n    location: LocationType\r\n    stations: Array<StationType>\r\n}\r\n\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n    latitude: number\r\n    longitude: number\r\n}\r\n\r\nexport type StationType = {\r\n    empty_slots: number\r\n    extra: ExtraType\r\n    free_bikes: number\r\n    id: string\r\n    latitude: number\r\n    longitude: number\r\n    name: string\r\n    timestamp: string\r\n}\r\n\r\nexport type ExtraType = {\r\n    address: string\r\n    ebikes: number\r\n    electric_free: number\r\n    electric_slots: number\r\n    normal_bikes: number\r\n    normal_free: number\r\n    normal_slots: number\r\n    slots: number\r\n    uid: string\r\n}","const initialState = {\r\n    status: \"idle\" as RequestStatusType\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_APP_STATUS\":\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"SET_APP_STATUS\", status} as const)\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';","import {Dispatch} from \"redux\";\r\nimport {companiesAPI, CompanyType, StationType} from \"../m3_dal/companies-api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    companies: [] as Array<CompanyType>,\r\n    currentCompany: null as CompanyType | null,\r\n    currentStations: [] as Array<StationType>,\r\n    status: \"idle\" as RequestStatusType,\r\n    favoriteStations: [\"\"] as Array<string>\r\n}\r\n\r\nexport const companiesReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_COMPANIES\":\r\n            return {...state, companies: action.companies, currentCompany: action.companies[0]}\r\n        case \"SET_CURRENT_STATIONS\":\r\n            return {...state, currentStations: action.stations}\r\n        case \"SET_CURRENT_COMPANY\":\r\n            return {...state, currentCompany: action.company}\r\n        case \"SET_COMPANIES_STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"SET_FAVORITE_STATION\":\r\n            return {...state, favoriteStations: [action.stationId, ...state.favoriteStations]}\r\n        case \"REMOVE_FAVORITE_STATION\":\r\n            return {...state, favoriteStations: state.favoriteStations.filter(id => id !== action.stationId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCompaniesAC = (companies: Array<CompanyType>) => ({type: \"SET_COMPANIES\", companies} as const)\r\nexport const setCurrentStationsAC = (stations: Array<StationType>) => ({type: \"SET_CURRENT_STATIONS\", stations} as const)\r\nexport const setCurrentCompanyAC = (company: CompanyType) => ({type: \"SET_CURRENT_COMPANY\", company} as const)\r\nexport const setStationsStatusAC = (status: RequestStatusType) => ({type: \"SET_COMPANIES_STATUS\", status} as const)\r\nexport const setFavoriteStationAC = (stationId: string) => ({type: \"SET_FAVORITE_STATION\", stationId} as const)\r\nexport const removeStationAC = (stationId: string) => ({type: \"REMOVE_FAVORITE_STATION\", stationId} as const)\r\n\r\nexport const getCompaniesTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    companiesAPI.getCompanies()\r\n        .then((res) => {\r\n            dispatch(setCompaniesAC(res.networks))\r\n        })\r\n        .catch(() => {\r\n\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const getStationsTC = (companies: CompanyType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setStationsStatusAC(\"loading\"))\r\n    companiesAPI.getStations(companies.id)\r\n        .then((res) => {\r\n            dispatch(setCurrentStationsAC(res.network.stations))\r\n            dispatch(setCurrentCompanyAC(companies))\r\n        })\r\n        .catch(() => {\r\n\r\n        })\r\n        .finally(() => {\r\n            dispatch(setStationsStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setCompaniesAC> |\r\n    ReturnType<typeof setCurrentStationsAC> |\r\n    ReturnType<typeof setCurrentCompanyAC> |\r\n    ReturnType<typeof setAppStatusAC> |\r\n    ReturnType<typeof setStationsStatusAC> |\r\n    ReturnType<typeof setFavoriteStationAC> |\r\n    ReturnType<typeof removeStationAC>\r\n\r\n","import React from \"react\";\r\nimport styles from \"./Company.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getStationsTC} from \"../../../../m2_bll/companies-reducer\";\r\nimport {CompanyType} from \"../../../../m3_dal/companies-api\";\r\nimport {AppRootStateType} from \"../../../../m2_bll/store\";\r\n\r\nexport const Company = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const currentCompanyID = useSelector<AppRootStateType, string | undefined>\r\n    (state => state.companiesState.currentCompany?.id)\r\n\r\n    const handleClickCompany = () => {\r\n        dispatch(getStationsTC(props.companies))\r\n    }\r\n    return (\r\n        <div className={styles.company}>\r\n            <button className={styles.button}\r\n                    onClick={handleClickCompany}\r\n                    disabled={currentCompanyID === props.companies.id}>\r\n                <div>Company: \"{props.companies.company}\"</div>\r\n                <div>City: {props.companies && props.companies.location.city}</div>\r\n            </button>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    companies: CompanyType\r\n}","export default __webpack_public_path__ + \"static/media/preloader2.a1a99674.gif\";","import React from \"react\";\r\nimport s from \"./Preloader.module.css\"\r\nimport preloader from \"./preloader2.gif\"\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div className={s.wrapper}>\r\n            <img src={preloader} alt=\"loading...\"/>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {getCompaniesTC, getStationsTC} from \"../../../m2_bll/companies-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2_bll/store\";\r\nimport {Company} from \"./company/Company\";\r\nimport styles from \"./Companies.module.css\"\r\nimport {CompanyType} from \"../../../m3_dal/companies-api\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {RequestStatusType} from \"../../../m2_bll/app-reducer\";\r\n\r\nexport const Companies = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const companies = useSelector<AppRootStateType, Array<CompanyType>>(state => state.companiesState.companies)\r\n    const currentCompany = useSelector<AppRootStateType, CompanyType | null>(state => state.companiesState.currentCompany)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.appState.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCompaniesTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        currentCompany && dispatch(getStationsTC(currentCompany))\r\n    }, [currentCompany])\r\n\r\n    return (\r\n        <div className={styles.companies}>\r\n            <h2 className={styles.h2}>Companies:</h2>\r\n            {status === \"loading\" ? <Preloader/> : null}\r\n            {companies ? companies.map(c => <Company key={c.id} companies={c} />) : null}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/like.b16558c9.svg\";","export default __webpack_public_path__ + \"static/media/heart.c31d61db.svg\";","import React from \"react\";\r\nimport styles from \"./Station.module.css\"\r\nimport {StationType} from \"../../../../m3_dal/companies-api\";\r\nimport favorite from \"../../../../../assets/img/like.svg\"\r\nimport like from \"../../../../../assets/img/heart.svg\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {removeStationAC, setFavoriteStationAC} from \"../../../../m2_bll/companies-reducer\";\r\nimport {AppRootStateType} from \"../../../../m2_bll/store\";\r\n\r\nexport const Station = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const favoriteStations = useSelector<AppRootStateType, Array<string>>(state => state.companiesState.favoriteStations)\r\n    const setFavoriteStation = () => {\r\n        dispatch(setFavoriteStationAC(props.station.id))\r\n    }\r\n    const removeFavoriteStations = () => {\r\n        dispatch(removeStationAC(props.station.id))\r\n\r\n    }\r\n    const favoriteStation = favoriteStations.find(id => id === props.station.id)\r\n\r\n    return (\r\n        <div className={styles.station}>\r\n            Address: {props.station.name}\r\n            {!favoriteStation\r\n                ? <button className={styles.button} onClick={setFavoriteStation}>\r\n                    <img src={like} alt=\"Do you want to add to favourites?\"/>\r\n                </button>\r\n                : <button className={styles.button} onClick={removeFavoriteStations}>\r\n                    <img src={favorite} alt=\"Favorite\"/>\r\n                </button>\r\n            }\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype PropsType = {\r\n    station: StationType\r\n}","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2_bll/store\";\r\nimport {CompanyType, StationType} from \"../../../m3_dal/companies-api\";\r\nimport styles from \"./Stations.module.css\"\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {RequestStatusType} from \"../../../m2_bll/app-reducer\";\r\nimport {Station} from \"./station/Station\";\r\n\r\nexport const Stations = () => {\r\n\r\n    const stations = useSelector<AppRootStateType, Array<StationType>>(state => state.companiesState.currentStations)\r\n\r\n    const currentCompany = useSelector<AppRootStateType, CompanyType | null>(state => state.companiesState.currentCompany)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.companiesState.status)\r\n\r\n    return (\r\n        <div className={styles.stations}>\r\n            <h2 className={styles.h2}>Stations \"{currentCompany && currentCompany.company}\":</h2>\r\n            <h3 className={styles.h3}>City: {currentCompany && currentCompany.location.city}</h3>\r\n            <div className={styles.totalStations}>Total stations: {stations && stations.length}</div>\r\n            {status === \"loading\" ? <Preloader/> : null}\r\n            {status !== \"loading\" && stations && stations.map(s => <Station key={s.id} station={s}/>)}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Companies} from \"../companies/Companies\";\r\nimport styles from \"./Main.module.css\"\r\nimport {Stations} from \"../stations/Stations\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <div className={styles.mainBlock}>\r\n            <h1>CityBikes</h1>\r\n            <div className={styles.mainContainer}>\r\n                <Companies/>\r\n                <Stations/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Main} from \"./components/main/Main\";\n\nexport const App = () => {\n    return (\n        <div>\n            <Main/>\n        </div>\n    )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {companiesReducer} from \"./companies-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n        companiesState: companiesReducer,\r\n        appState: appReducer\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './n1_main/m1_ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1_main/m2_bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stations\":\"Stations_stations__mdXjD\",\"h2\":\"Stations_h2__dtXGN\",\"h3\":\"Stations_h3__39uNV\",\"totalStations\":\"Stations_totalStations__3Bjis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"station\":\"Station_station__3Reir\",\"like\":\"Station_like__B7HnV\",\"button\":\"Station_button__2nv4n\"};"],"sourceRoot":""}